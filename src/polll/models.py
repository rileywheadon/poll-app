from typing import List
from datetime import datetime, timezone
from flask_sqlalchemy import SQLAlchemy
import sqlalchemy as sa
import sqlalchemy.orm as so

# Base class for declarative class definitions
class Base(so.DeclarativeBase):

    # Define a custom constraint naming convention
    metadata = sa.MetaData(naming_convention={
        "ix": 'ix_%(column_0_label)s',
        "uq": "uq_%(table_name)s_%(column_0_name)s",
        "ck": "ck_%(table_name)s_%(constraint_name)s",
        "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
        "pk": "pk_%(table_name)s"
    })

# Initialize a database using DeclarativeBase
db = SQLAlchemy(model_class=Base)

# NOTE:Tables are automatically generated by FLASK-SQLAlchemy

class User(db.Model):
    id: so.Mapped[int] = so.mapped_column(primary_key=True)
    username: so.Mapped[str] = so.mapped_column(unique=True)
    email: so.Mapped[str]
    responses: so.Mapped[List["Response"]] = so.relationship("Response", back_populates="user")


class Poll(db.Model):
    id: so.Mapped[int] = so.mapped_column(primary_key=True)
    question: so.Mapped[str]
    responses: so.Mapped[List["Response"]] = so.relationship("Response", back_populates="poll")
    answers: so.Mapped[List["PollAnswer"]] = so.relationship("PollAnswer", back_populates="poll")


class PollAnswer(db.Model):
    id: so.Mapped[int] = so.mapped_column(primary_key=True)
    answer: so.Mapped[str]
    responses: so.Mapped[List["Response"]] = so.relationship("Response", back_populates="answer")

    poll_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("poll.id"))

    poll: so.Mapped[Poll] = so.relationship("Poll", back_populates="answers")


class Response(db.Model):
    id: so.Mapped[int] = so.mapped_column(primary_key=True)
    timestamp: so.Mapped[datetime] = so.mapped_column(index=True, default=lambda: datetime.now(timezone.utc))

    user_id : so.Mapped[int] = so.mapped_column(sa.ForeignKey("user.id"))
    poll_id : so.Mapped[int] = so.mapped_column(sa.ForeignKey("poll.id"))
    answer_id : so.Mapped[int] = so.mapped_column(sa.ForeignKey("poll_answer.id")) 

    user: so.Mapped["User"] = so.relationship("User", back_populates="responses")
    poll: so.Mapped["Poll"] = so.relationship("Poll", back_populates="responses")
    answer: so.Mapped["PollAnswer"] = so.relationship("PollAnswer", back_populates="responses")

